
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:

Terraform will perform the following actions:

# aws_instance.web will be created
resource "aws_instance" "web" {
  ami               = "ami-0c3fd0f5d33134a76"
  instance_type     = "t2.micro"
  associate_public_ip_address = true
  key_name          = "your-existing-keypair-name"
  user_data         = "b7ae7d432513168fe0310c5e3e57307300749c5a"
  source_dest_check = true

  tags = {
    "Name" = "sre-demo-ec2"
  }
}

# aws_instance.web_2 will be created
resource "aws_instance" "web_2" {
  ami                         = "ami-0c3fd0f5d33134a76"
  associate_public_ip_address = true
  instance_type               = "t2.micro"
  key_name                    = "your-key-name"
  user_data                   = "b7ae7d432513168fe0310c5e3e57307300749c5a"

  tags = {
    "Name" = "sre-demo-ec2-2"
  }
}

# aws_internet_gateway.igw will be created
resource "aws_internet_gateway" "igw" {
  tags = {
    "Name" = "sre-demo-igw"
  }
}

# aws_lb.web_alb will be created
resource "aws_lb" "web_alb" {
  client_keep_alive  = 3600
  desync_mitigation_mode = "defensive"
  enable_http2       = true
  idle_timeout       = 60
  internal           = false
  load_balancer_type = "application"
  name               = "sre-demo-alb"
  preserve_host_header = false
  xff_header_processing_mode = "append"

  tags = {
    "Name" = "sre-demo-alb"
  }
}

# aws_lb_listener.web_listener will be created
resource "aws_lb_listener" "web_listener" {
  port     = 80
  protocol = "HTTP"

  default_action {
    type = "forward"
  }
}

# aws_lb_target_group.web_tg will be created
resource "aws_lb_target_group" "web_tg" {
  name               = "sre-demo-tg"
  port               = 80
  protocol           = "HTTP"
  deregistration_delay = "300"
  lambda_multi_value_headers_enabled = false
  proxy_protocol_v2  = false
  slow_start         = 0
  target_type        = "instance"

  tags = {
    "Name" = "sre-demo-tg"
  }

  health_check {
    enabled             = true
    healthy_threshold   = 3
    interval            = 30
    path                = "/"
    port                = "traffic-port"
    protocol            = "HTTP"
    unhealthy_threshold = 3
  }
}

# aws_lb_target_group_attachment.web_2_attach will be created
resource "aws_lb_target_group_attachment" "web_2_attach" {
  port = 80
}

# aws_lb_target_group_attachment.web_attach will be created
resource "aws_lb_target_group_attachment" "web_attach" {
  port = 80
}

# aws_route_table.public will be created
resource "aws_route_table" "public" {
  route = [
    {
      cidr_block = "0.0.0.0/0"
      # gateway_id は適用後に決定されます
    }
  ]
  tags = {
    "Name" = "sre-demo-rt"
  }
}

# aws_route_table_association.public_1 will be created
resource "aws_route_table_association" "public_1" {
  # route_table_id, subnet_id は適用後に決定されます
}

# aws_route_table_association.public_2 will be created
resource "aws_route_table_association" "public_2" {
  # route_table_id, subnet_id は適用後に決定されます
}

# aws_security_group.web_sg will be created
resource "aws_security_group" "web_sg" {
  description = "Managed by Terraform"
  name        = "sre-demo-web-sg"

  egress = [
    {
      cidr_blocks = ["0.0.0.0/0"]
      from_port   = 0
      to_port     = 0
      protocol    = "-1"
    }
  ]

  ingress = [
    {
      cidr_blocks = ["0.0.0.0/0"]
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
    },
    {
      cidr_blocks = ["0.0.0.0/0"]
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
    }
  ]

  tags = {
    "Name" = "sre-demo-web-sg"
  }
}

# aws_subnet.public_1 will be created
resource "aws_subnet" "public_1" {
  availability_zone         = "ap-northeast-1a"
  cidr_block               = "10.0.1.0/24"
  assign_ipv6_address_on_creation = false
  map_public_ip_on_launch  = true
  tags = {
    "Name" = "sre-demo-subnet-1"
  }
}

# aws_subnet.public_2 will be created
resource "aws_subnet" "public_2" {
  availability_zone         = "ap-northeast-1c"
  cidr_block               = "10.0.2.0/24"
  assign_ipv6_address_on_creation = false
  map_public_ip_on_launch  = true
  tags = {
    "Name" = "sre-demo-subnet-2"
  }
}

# aws_vpc.main will be created
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true
  instance_tenancy     = "default"
  tags = {
    "Name" = "sre-demo-vpc"
  }
}

Plan: 15 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  alb_dns_name = (known after apply)

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
